(defvar *fix_leg_coords* (make-coords))
(defvar *tmp_fix_coords* (make-coords))

(warn "~%(setup-environment)~%")
(defun setup-environment ()
  (defmethod glviewsurface
    (:string
     (x y str &optional (fid x:font-courb24)) ;;x::font-helvetica-bold-12))
     (send self :makecurrent)
     (gl::glMatrixMode gl::GL_PROJECTION)
     (gl::glPushMatrix)
     (send self :2d-mode)
     (unless (eq (get self :glxusexfont) fid)
       (setf (get self :glxusexfont) fid)
       (gl::glxUseXfont fid 32 96 (+ 1000 32)))
     (gl::glRasterPos2i (round x) (- (send self :height) (round y)))
     (gl::glListBase 1000)
     (gl::glCallLists (length str) gl::GL_UNSIGNED_BYTE str)
     (send self :3d-mode)
     (gl::glMatrixMode gl::GL_PROJECTION)
     (gl::glPopMatrix)
     (gl::glMatrixMode gl::GL_MODELVIEW)
     ))
  (make-irtviewer)
  (send *irtviewer* :resize 1200 800)
  (send *irtviewer* :set-val 'x::draw-floor t)
  (load "package://hrpsys_ros_bridge_tutorials/euslisp/samplerobot-interface.l")
  (setq *robot* (samplerobot))
  (setq *com* (make-cube 60 60 60))
  (send *com* :set-color #f(1 0 1))
  (send *com* :locate (send *robot* :centroid) :world)
  (objects (list *robot* *com*))
  (send *irtviewer*
        :look-all (send (geo::make-bounding-box (flatten (send-all (x::draw-things *robot*) :vertices)))
                        :grow 0.7))
  )

(defun draw-specific-coordinates-with-string ()
  (labels ((with-modify-color
            (col func)
            (let ((pc (send *viewer* :viewsurface :color)))
              (send *viewer* :viewsurface :color col)
              (funcall func)
              (send *viewer* :viewsurface :color pc))))
    (send (apply #'midcoords 0.5 (send *robot* :legs :end-coords)) :draw-on :flush nil :size 260 :width 5 :color #f(1 0 0))
    (with-modify-color #f(1 0 0)
                       #'(lambda () (send *viewer* :viewsurface :string 20 20 "red = midcoords of foot_pos (AutoBalancer::fixLegToCoords)")))
    (send (send (car (send *robot* :links)) :worldcoords) :draw-on :flush nil :size 230 :width 5 :color #f(0 1 0))
    (with-modify-color #f(0 1 0)
                       #'(lambda () (send *viewer* :viewsurface :string 20 50 "green = rootLink")))
    (send (make-coords) :draw-on :flush nil :size 200 :width 5 :color #f(0 0 1))
    (with-modify-color #f(0 0 1)
                       #'(lambda () (send *viewer* :viewsurface :string 20 80 "blue = world coords")))
    (with-modify-color #f(1 0 1)
                       #'(lambda () (send *viewer* :viewsurface :string 20 110 "purple = COM")))
    ))

(warn "(test1-startup)~%")
(defun test1-startup ()
  (send *irtviewer* :title (format nil "startup"))
  ;; step 1 : onInitialize
  (setq *fix_leg_coords* (make-coords))
  (format t "---onInitialize---~%")
  (format t "~tfix_leg_coords = coordinates;~%~t~t~A~%" *fix_leg_coords*)
  (send *robot* :move-to (make-coords) :world)
  (send *robot* :init-pose)
  (draw-specific-coordinates-with-string)
  (send *com* :locate (send *robot* :centroid) :world)
  (send *irtviewer* :draw-objects)
  (send *viewer* :viewsurface :flush)
  ;; step 2
  (y-or-n-p "---onExecute / AutoBalancer::getTargetParameters / before fixLegToCoords(tmp_fix_coords.pos, tmp_fix_coords.rot);---")
  (send *robot* :move-to (make-coords) :world)
  (send *robot* :init-pose)
  (send *com* :locate (send *robot* :centroid) :world)
  (send *irtviewer* :draw-objects)
  (draw-specific-coordinates-with-string)
  (send *viewer* :viewsurface :flush)
  ;; step 3
  (y-or-n-p "---onExecute / AutoBalancer::getTargetParameters / after fixLegToCoords(tmp_fix_coords.pos, tmp_fix_coords.rot);---")
  (setq *tmp_fix_coords* *fix_leg_coords*)
  (format t "~ttmp_fix_coords = fix_leg_coords~%~t~t~A~%" *tmp_fix_coords*)
  (send *robot* :fix-leg-to-coords *tmp_fix_coords*)
  (send *com* :locate (send *robot* :centroid) :world)
  (send *irtviewer* :draw-objects)
  (draw-specific-coordinates-with-string)
  (send *viewer* :viewsurface :flush)
  (format t "~ttmpikp.target_end_coords.pos = tmpikp.target_p0 + tmpikp.target_r0 * tmpikp.localPos;~%~t~t=~A~%" (send (send *robot* :rleg :end-coords) :worldpos))
  (format t "~ttmpikp.target_end_coords.rot = tmpikp.target_r0 * tmpikp.localR;~%~t~t=~A~%" (send (send *robot* :rleg :end-coords) :worldrot))
  )

(warn "(test2-send-angle-vector-without-abc)~%")
(defun test2-send-angle-vector-without-abc ()
  (send *irtviewer* :title (format nil "(send *ri* :angle-vector (send *robot* :angle-vector))"))
  ;; step 1
  (format t "---onExecute / AutoBalancer::getTargetParameters / before fixLegToCoords(tmp_fix_coords.pos, tmp_fix_coords.rot);---~%")
  (send *robot* :move-to (make-coords) :world)
  (send *robot* :reset-pose)
  (send *com* :locate (send *robot* :centroid) :world)
  (send *irtviewer* :draw-objects)
  (draw-specific-coordinates-with-string)
  (send *viewer* :viewsurface :flush)
  ;; step 2
  (y-or-n-p "---onExecute / AutoBalancer::getTargetParameters / after fixLegToCoords(tmp_fix_coords.pos, tmp_fix_coords.rot);---")
  (setq *tmp_fix_coords* *fix_leg_coords*)
  (format t "~ttmp_fix_coords = fix_leg_coords~%~t~t~A~%" *tmp_fix_coords*)
  (send *robot* :fix-leg-to-coords *tmp_fix_coords*)
  (send *com* :locate (send *robot* :centroid) :world)
  (send *irtviewer* :draw-objects)
  (draw-specific-coordinates-with-string)
  (send *viewer* :viewsurface :flush)
  (format t "~ttmpikp.target_end_coords.pos = tmpikp.target_p0 + tmpikp.target_r0 * tmpikp.localPos;~%~t~t=~A~%" (send (send *robot* :rleg :end-coords) :worldpos))
  (format t "~ttmpikp.target_end_coords.rot = tmpikp.target_r0 * tmpikp.localR;~%~t~t=~A~%" (send (send *robot* :rleg :end-coords) :worldrot))
  )

(warn "(test3-start-auto-balancer)~%")
(defun test3-start-auto-balancer ()
  (send *irtviewer* :title (format nil "(send *ri* :start-auto-balancer)"))
  ;; step 1
  (format t "---startAutoBalancer -> startABCParam---~%")
  (format t "~tset is_active~%")
  (setq *tmp_fix_coords* *fix_leg_coords*)
  (format t "~ttmp_fix_coords = fix_leg_coords~%~t~t~A~%" *tmp_fix_coords*)
  (send *robot* :fix-leg-to-coords *tmp_fix_coords*)
  (send *com* :locate (send *robot* :centroid) :world)
  (send *irtviewer* :draw-objects)
  (draw-specific-coordinates-with-string)
  (send *viewer* :viewsurface :flush)
  (format t "---MODE_SYNC_TO_ABC : set target_p0 and target_r0---~%")
  (format t "~tit->second.target_p0 = it->second.target_link->p;~%")
  (format t "~tit->second.target_r0 = it->second.target_link->R;~%")
  (y-or-n-p "---changed to MODE_ABC---")
  (setq *tmp_fix_coords* *fix_leg_coords*)
  (format t "~ttmp_fix_coords = fix_leg_coords~%~t~t~A~%" *tmp_fix_coords*)
  (send *robot* :fix-leg-to-coords *tmp_fix_coords*)
  (format t "---onExecute / AutoBalancer::getTargetParameters / after fixLegToCoords(tmp_fix_coords.pos, tmp_fix_coords.rot);---~%")
  (send *robot* :move-centroid-on-foot :both '(:rleg :lleg))
  (format t "---onExecute / solveLimbIK---~%")
  (send *com* :locate (send *robot* :centroid) :world)
  (send *irtviewer* :draw-objects)
  (draw-specific-coordinates-with-string)
  (send *viewer* :viewsurface :flush)
  )


(warn "(test4-go-pos)~%")
(defun test4-go-pos ()
  (send *irtviewer* :title (format nil "(send *ri* :go-pos 1 0 0)"))
  ;; step 1
  (format t "---onExecute / AutoBalancer::getTargetParameters / before fixLegToCoords(tmp_fix_coords.pos, tmp_fix_coords.rot);---~%")
  (send *robot* :move-to *fix_leg_coords* :world)
  (progn
    (send *robot* :reset-pose)
    (send *robot* :arms :elbow-p :joint-angle 0)
    (send *robot* :torso :waist-p :joint-angle -90)
    (send *robot* :arms :shoulder-p :joint-angle -180))
  (send *com* :locate (send *robot* :centroid) :world)
  (send *irtviewer* :draw-objects)
  (draw-specific-coordinates-with-string)
  (send *viewer* :viewsurface :flush)
  ;; step 2
  (y-or-n-p "~tgg->get_swing_support_mid_coords(tmp_fix_coords);")
  (setq *tmp_fix_coords* (make-coords :pos #f(1000 0 0)))
  (draw-specific-coordinates-with-string)
  (labels ((with-modify-color
            (col func)
            (let ((pc (send *viewer* :viewsurface :color)))
              (send *viewer* :viewsurface :color col)
              (funcall func)
              (send *viewer* :viewsurface :color pc))))
    (send *tmp_fix_coords* :draw-on :flush nil :size 170 :width 5 :color #f(1 1 1))
    (with-modify-color #f(1 1 1)
                       #'(lambda () (send *viewer* :viewsurface :string 20 140 "white = swing_support_mid_coords")))
    )
  (send *viewer* :viewsurface :flush)
  (y-or-n-p "---onExecute / AutoBalancer::getTargetParameters / after fixLegToCoords(tmp_fix_coords.pos, tmp_fix_coords.rot);---")
  (send *robot* :fix-leg-to-coords *tmp_fix_coords*)
  (send *com* :locate (send *robot* :centroid) :world)
  (send *irtviewer* :draw-objects)
  (draw-specific-coordinates-with-string)
  (labels ((with-modify-color
            (col func)
            (let ((pc (send *viewer* :viewsurface :color)))
              (send *viewer* :viewsurface :color col)
              (funcall func)
              (send *viewer* :viewsurface :color pc))))
    (send (apply #'midcoords 0.5 (send *robot* :legs :end-coords)) :draw-on :flush nil :size 170 :width 5 :color #f(1 1 1))
    (with-modify-color #f(1 1 1)
                       #'(lambda () (send *viewer* :viewsurface :string 20 140 "white = ref_cog")))
    )
  (send *viewer* :viewsurface :flush)
  (format t "~ttmpikp.target_end_coords.pos = tmpikp.target_p0 + tmpikp.target_r0 * tmpikp.localPos;~%~t~t=~A~%" (send (send *robot* :rleg :end-coords) :worldpos))
  (format t "~ttmpikp.target_end_coords.rot = tmpikp.target_r0 * tmpikp.localR;~%~t~t=~A~%" (send (send *robot* :rleg :end-coords) :worldrot))
  ;; step 3
  (y-or-n-p "---onExecute / solveLimbIK---")
  (send *robot* :move-centroid-on-foot :both '(:rleg :lleg))
  (send *com* :locate (send *robot* :centroid) :world)
  (send *irtviewer* :draw-objects)
  (draw-specific-coordinates-with-string)
  (send *viewer* :viewsurface :flush)
  )
